# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class StoreCredentialRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        StoreCredentialRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'account_id': 'str',
            'secret_key': 'str',
            'scope': 'str'
        }

        self.attribute_map = {
            'name': 'name',
            'account_id': 'account_id',
            'secret_key': 'secret_key',
            'scope': 'scope'
        }

        self._name = None
        self._account_id = None
        self._secret_key = None
        self._scope = None

    @property
    def name(self):
        """
        Gets the name of this StoreCredentialRequest.
        Credential name

        :return: The name of this StoreCredentialRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this StoreCredentialRequest.
        Credential name

        :param name: The name of this StoreCredentialRequest.
        :type: str
        """
        self._name = name

    @property
    def account_id(self):
        """
        Gets the account_id of this StoreCredentialRequest.
        Public part of the credential. This depends on the specific provider this credential belongs to. E.g., in EC2 this corresponds to an Access ID.

        :return: The account_id of this StoreCredentialRequest.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """
        Sets the account_id of this StoreCredentialRequest.
        Public part of the credential. This depends on the specific provider this credential belongs to. E.g., in EC2 this corresponds to an Access ID.

        :param account_id: The account_id of this StoreCredentialRequest.
        :type: str
        """
        self._account_id = account_id

    @property
    def secret_key(self):
        """
        Gets the secret_key of this StoreCredentialRequest.
        Private part of the credential. This depends on the specific provider this credential belongs to. E.g., in EC2 this corresponds to a Secret Key.

        :return: The secret_key of this StoreCredentialRequest.
        :rtype: str
        """
        return self._secret_key

    @secret_key.setter
    def secret_key(self, secret_key):
        """
        Sets the secret_key of this StoreCredentialRequest.
        Private part of the credential. This depends on the specific provider this credential belongs to. E.g., in EC2 this corresponds to a Secret Key.

        :param secret_key: The secret_key of this StoreCredentialRequest.
        :type: str
        """
        self._secret_key = secret_key

    @property
    def scope(self):
        """
        Gets the scope of this StoreCredentialRequest.
        Credential scope. E.g. not present for EC2, but corresponds to a project id in the case of GCE

        :return: The scope of this StoreCredentialRequest.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """
        Sets the scope of this StoreCredentialRequest.
        Credential scope. E.g. not present for EC2, but corresponds to a project id in the case of GCE

        :param scope: The scope of this StoreCredentialRequest.
        :type: str
        """
        self._scope = scope

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

