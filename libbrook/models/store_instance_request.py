# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class StoreInstanceRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        StoreInstanceRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'description': 'str',
            'tags': 'list[str]',
            'template': 'str',
            'provider': 'str',
            'region': 'str',
            'image': 'str',
            'key': 'str',
            'rules': 'list[InstanceRules]',
            'project': 'str'
        }

        self.attribute_map = {
            'name': 'name',
            'description': 'description',
            'tags': 'tags',
            'template': 'template',
            'provider': 'provider',
            'region': 'region',
            'image': 'image',
            'key': 'key',
            'rules': 'rules',
            'project': 'project'
        }

        self._name = None
        self._description = None
        self._tags = None
        self._template = None
        self._provider = None
        self._region = None
        self._image = None
        self._key = None
        self._rules = None
        self._project = None

    @property
    def name(self):
        """
        Gets the name of this StoreInstanceRequest.
        Instance name

        :return: The name of this StoreInstanceRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this StoreInstanceRequest.
        Instance name

        :param name: The name of this StoreInstanceRequest.
        :type: str
        """
        self._name = name

    @property
    def description(self):
        """
        Gets the description of this StoreInstanceRequest.
        Instance description (optional)

        :return: The description of this StoreInstanceRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this StoreInstanceRequest.
        Instance description (optional)

        :param description: The description of this StoreInstanceRequest.
        :type: str
        """
        self._description = description

    @property
    def tags(self):
        """
        Gets the tags of this StoreInstanceRequest.
        List of instance tags (optional)

        :return: The tags of this StoreInstanceRequest.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this StoreInstanceRequest.
        List of instance tags (optional)

        :param tags: The tags of this StoreInstanceRequest.
        :type: list[str]
        """
        self._tags = tags

    @property
    def template(self):
        """
        Gets the template of this StoreInstanceRequest.
        Template id

        :return: The template of this StoreInstanceRequest.
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """
        Sets the template of this StoreInstanceRequest.
        Template id

        :param template: The template of this StoreInstanceRequest.
        :type: str
        """
        self._template = template

    @property
    def provider(self):
        """
        Gets the provider of this StoreInstanceRequest.
        Provider id

        :return: The provider of this StoreInstanceRequest.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """
        Sets the provider of this StoreInstanceRequest.
        Provider id

        :param provider: The provider of this StoreInstanceRequest.
        :type: str
        """
        self._provider = provider

    @property
    def region(self):
        """
        Gets the region of this StoreInstanceRequest.
        Region id

        :return: The region of this StoreInstanceRequest.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """
        Sets the region of this StoreInstanceRequest.
        Region id

        :param region: The region of this StoreInstanceRequest.
        :type: str
        """
        self._region = region

    @property
    def image(self):
        """
        Gets the image of this StoreInstanceRequest.
        Image id

        :return: The image of this StoreInstanceRequest.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """
        Sets the image of this StoreInstanceRequest.
        Image id

        :param image: The image of this StoreInstanceRequest.
        :type: str
        """
        self._image = image

    @property
    def key(self):
        """
        Gets the key of this StoreInstanceRequest.
        SSH key id

        :return: The key of this StoreInstanceRequest.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """
        Sets the key of this StoreInstanceRequest.
        SSH key id

        :param key: The key of this StoreInstanceRequest.
        :type: str
        """
        self._key = key

    @property
    def rules(self):
        """
        Gets the rules of this StoreInstanceRequest.
        List of tuples <proto, port_begin, port_end, source>

        :return: The rules of this StoreInstanceRequest.
        :rtype: list[InstanceRules]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """
        Sets the rules of this StoreInstanceRequest.
        List of tuples <proto, port_begin, port_end, source>

        :param rules: The rules of this StoreInstanceRequest.
        :type: list[InstanceRules]
        """
        self._rules = rules

    @property
    def project(self):
        """
        Gets the project of this StoreInstanceRequest.
        Project id (optional, default = null for unmanaged instances)

        :return: The project of this StoreInstanceRequest.
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """
        Sets the project of this StoreInstanceRequest.
        Project id (optional, default = null for unmanaged instances)

        :param project: The project of this StoreInstanceRequest.
        :type: str
        """
        self._project = project

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

