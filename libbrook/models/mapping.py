# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Mapping(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Mapping - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'name': 'str',
            'cpu_number': 'float',
            'mem_size': 'float',
            'hdd_volume_size': 'float',
            'template': 'str',
            'provider': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'cpu_number': 'cpu_number',
            'mem_size': 'mem_size',
            'hdd_volume_size': 'hdd_volume_size',
            'template': 'template',
            'provider': 'provider'
        }

        self._id = None
        self._name = None
        self._cpu_number = None
        self._mem_size = None
        self._hdd_volume_size = None
        self._template = None
        self._provider = None

    @property
    def id(self):
        """
        Gets the id of this Mapping.
        Mapping id.

        :return: The id of this Mapping.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Mapping.
        Mapping id.

        :param id: The id of this Mapping.
        :type: str
        """
        self._id = id

    @property
    def name(self):
        """
        Gets the name of this Mapping.
        Instance type name.

        :return: The name of this Mapping.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Mapping.
        Instance type name.

        :param name: The name of this Mapping.
        :type: str
        """
        self._name = name

    @property
    def cpu_number(self):
        """
        Gets the cpu_number of this Mapping.
        Number of CPUs.

        :return: The cpu_number of this Mapping.
        :rtype: float
        """
        return self._cpu_number

    @cpu_number.setter
    def cpu_number(self, cpu_number):
        """
        Sets the cpu_number of this Mapping.
        Number of CPUs.

        :param cpu_number: The cpu_number of this Mapping.
        :type: float
        """
        self._cpu_number = cpu_number

    @property
    def mem_size(self):
        """
        Gets the mem_size of this Mapping.
        Memory size in GB.

        :return: The mem_size of this Mapping.
        :rtype: float
        """
        return self._mem_size

    @mem_size.setter
    def mem_size(self, mem_size):
        """
        Sets the mem_size of this Mapping.
        Memory size in GB.

        :param mem_size: The mem_size of this Mapping.
        :type: float
        """
        self._mem_size = mem_size

    @property
    def hdd_volume_size(self):
        """
        Gets the hdd_volume_size of this Mapping.
        Hard disk volume size in GB.

        :return: The hdd_volume_size of this Mapping.
        :rtype: float
        """
        return self._hdd_volume_size

    @hdd_volume_size.setter
    def hdd_volume_size(self, hdd_volume_size):
        """
        Sets the hdd_volume_size of this Mapping.
        Hard disk volume size in GB.

        :param hdd_volume_size: The hdd_volume_size of this Mapping.
        :type: float
        """
        self._hdd_volume_size = hdd_volume_size

    @property
    def template(self):
        """
        Gets the template of this Mapping.
        Mapping template id.

        :return: The template of this Mapping.
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """
        Sets the template of this Mapping.
        Mapping template id.

        :param template: The template of this Mapping.
        :type: str
        """
        self._template = template

    @property
    def provider(self):
        """
        Gets the provider of this Mapping.
        Mapping template provider.

        :return: The provider of this Mapping.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """
        Sets the provider of this Mapping.
        Mapping template provider.

        :param provider: The provider of this Mapping.
        :type: str
        """
        self._provider = provider

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

