# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Instance(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Instance - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'pid': 'str',
            'name': 'str',
            'description': 'str',
            'template': 'str',
            'provider': 'str',
            'region': 'str',
            'zone': 'str',
            'image': 'str',
            'key': 'str',
            'project': 'str',
            'created_at': 'str',
            'updated_at': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'pid': 'pid',
            'name': 'name',
            'description': 'description',
            'template': 'template',
            'provider': 'provider',
            'region': 'region',
            'zone': 'zone',
            'image': 'image',
            'key': 'key',
            'project': 'project',
            'created_at': 'created_at',
            'updated_at': 'updated_at'
        }

        self._id = None
        self._pid = None
        self._name = None
        self._description = None
        self._template = None
        self._provider = None
        self._region = None
        self._zone = None
        self._image = None
        self._key = None
        self._project = None
        self._created_at = None
        self._updated_at = None

    @property
    def id(self):
        """
        Gets the id of this Instance.
        Instance id

        :return: The id of this Instance.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Instance.
        Instance id

        :param id: The id of this Instance.
        :type: str
        """
        self._id = id

    @property
    def pid(self):
        """
        Gets the pid of this Instance.
        Instance id at provider

        :return: The pid of this Instance.
        :rtype: str
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """
        Sets the pid of this Instance.
        Instance id at provider

        :param pid: The pid of this Instance.
        :type: str
        """
        self._pid = pid

    @property
    def name(self):
        """
        Gets the name of this Instance.
        Instance name

        :return: The name of this Instance.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Instance.
        Instance name

        :param name: The name of this Instance.
        :type: str
        """
        self._name = name

    @property
    def description(self):
        """
        Gets the description of this Instance.
        Instance description (optional)

        :return: The description of this Instance.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Instance.
        Instance description (optional)

        :param description: The description of this Instance.
        :type: str
        """
        self._description = description

    @property
    def template(self):
        """
        Gets the template of this Instance.
        Template id

        :return: The template of this Instance.
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """
        Sets the template of this Instance.
        Template id

        :param template: The template of this Instance.
        :type: str
        """
        self._template = template

    @property
    def provider(self):
        """
        Gets the provider of this Instance.
        Provider id

        :return: The provider of this Instance.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """
        Sets the provider of this Instance.
        Provider id

        :param provider: The provider of this Instance.
        :type: str
        """
        self._provider = provider

    @property
    def region(self):
        """
        Gets the region of this Instance.
        Region id

        :return: The region of this Instance.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """
        Sets the region of this Instance.
        Region id

        :param region: The region of this Instance.
        :type: str
        """
        self._region = region

    @property
    def zone(self):
        """
        Gets the zone of this Instance.
        Availability zone id

        :return: The zone of this Instance.
        :rtype: str
        """
        return self._zone

    @zone.setter
    def zone(self, zone):
        """
        Sets the zone of this Instance.
        Availability zone id

        :param zone: The zone of this Instance.
        :type: str
        """
        self._zone = zone

    @property
    def image(self):
        """
        Gets the image of this Instance.
        Image id

        :return: The image of this Instance.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """
        Sets the image of this Instance.
        Image id

        :param image: The image of this Instance.
        :type: str
        """
        self._image = image

    @property
    def key(self):
        """
        Gets the key of this Instance.
        SSH key id

        :return: The key of this Instance.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """
        Sets the key of this Instance.
        SSH key id

        :param key: The key of this Instance.
        :type: str
        """
        self._key = key

    @property
    def project(self):
        """
        Gets the project of this Instance.
        Project id (optional, default = null for unmanaged instances)

        :return: The project of this Instance.
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """
        Sets the project of this Instance.
        Project id (optional, default = null for unmanaged instances)

        :param project: The project of this Instance.
        :type: str
        """
        self._project = project

    @property
    def created_at(self):
        """
        Gets the created_at of this Instance.
        Creation timestamp (UTC) in RFC 3339 format.

        :return: The created_at of this Instance.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this Instance.
        Creation timestamp (UTC) in RFC 3339 format.

        :param created_at: The created_at of this Instance.
        :type: str
        """
        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this Instance.
        Update timestamp (UTC) in RFC 3339 format.

        :return: The updated_at of this Instance.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this Instance.
        Update timestamp (UTC) in RFC 3339 format.

        :param updated_at: The updated_at of this Instance.
        :type: str
        """
        self._updated_at = updated_at

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

