# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Invitation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Invitation - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'organization': 'str',
            'email': 'str',
            'expires_at': 'str',
            'created_at': 'str',
            'roles': 'list[Role]'
        }

        self.attribute_map = {
            'id': 'id',
            'organization': 'organization',
            'email': 'email',
            'expires_at': 'expires_at',
            'created_at': 'created_at',
            'roles': 'roles'
        }

        self._id = None
        self._organization = None
        self._email = None
        self._expires_at = None
        self._created_at = None
        self._roles = None

    @property
    def id(self):
        """
        Gets the id of this Invitation.
        Invitation id

        :return: The id of this Invitation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Invitation.
        Invitation id

        :param id: The id of this Invitation.
        :type: str
        """
        self._id = id

    @property
    def organization(self):
        """
        Gets the organization of this Invitation.
        Organization id

        :return: The organization of this Invitation.
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """
        Sets the organization of this Invitation.
        Organization id

        :param organization: The organization of this Invitation.
        :type: str
        """
        self._organization = organization

    @property
    def email(self):
        """
        Gets the email of this Invitation.
        Invitee email

        :return: The email of this Invitation.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this Invitation.
        Invitee email

        :param email: The email of this Invitation.
        :type: str
        """
        self._email = email

    @property
    def expires_at(self):
        """
        Gets the expires_at of this Invitation.
        Invitation expiration time

        :return: The expires_at of this Invitation.
        :rtype: str
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """
        Sets the expires_at of this Invitation.
        Invitation expiration time

        :param expires_at: The expires_at of this Invitation.
        :type: str
        """
        self._expires_at = expires_at

    @property
    def created_at(self):
        """
        Gets the created_at of this Invitation.
        Invitation creation time

        :return: The created_at of this Invitation.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this Invitation.
        Invitation creation time

        :param created_at: The created_at of this Invitation.
        :type: str
        """
        self._created_at = created_at

    @property
    def roles(self):
        """
        Gets the roles of this Invitation.
        List of invitee roles

        :return: The roles of this Invitation.
        :rtype: list[Role]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """
        Sets the roles of this Invitation.
        List of invitee roles

        :param roles: The roles of this Invitation.
        :type: list[Role]
        """
        self._roles = roles

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

